import torch
import cv2
import numpy as np
import threading
import serial
import time
import os
import pygame  # D√πng pygame ƒë·ªÉ ph√°t √¢m thanh

# Kh·ªüi t·∫°o pygame mixer
pygame.mixer.init()
alarm_sound = pygame.mixer.Sound("Alarm.wav")  # Thay b·∫±ng file √¢m thanh c·ªßa b·∫°n

# K·∫øt n·ªëi Arduino qua Serial (THAY COM9 b·∫±ng c·ªïng th·ª±c t·∫ø c·ªßa b·∫°n)
try:
    ser = serial.Serial('COM9', 9600, timeout=1)
    print("‚úÖ K·∫øt n·ªëi Arduino th√†nh c√¥ng!")
except serial.SerialException:
    print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Arduino! Ki·ªÉm tra c·ªïng COM.")
    ser = None

# T·∫£i m√¥ h√¨nh YOLOv5 ƒë√£ hu·∫•n luy·ªán
model_path = "best.pt"
model = torch.hub.load('ultralytics/yolov5', 'custom', path=model_path, force_reload=True)

# ƒê·ªãa ch·ªâ IP Camera
IP_CAM_URL = "http://192.168.1.9:8080/video"

# T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a c√≥
save_dir = "fire_images"
os.makedirs(save_dir, exist_ok=True)

# Bi·∫øn tr·∫°ng th√°i
fire_detected = False  # C·ªù b√°o ch√°y
mq2_triggered = False  # C·ªù ph√°t hi·ªán kh√≥i/gas
alarm_playing = False  # Theo d√µi tr·∫°ng th√°i √¢m thanh
frame = None  # L∆∞u frame m·ªõi nh·∫•t
frame_lock = threading.Lock()  # Bi·∫øn kh√≥a lu·ªìng ƒë·ªÉ tr√°nh l·ªói ƒë·ªçc frame

# H√†m ph√°t √¢m thanh c·∫£nh b√°o
def play_alarm():
    global alarm_playing
    if not pygame.mixer.get_busy():  # Ki·ªÉm tra n·∫øu ch∆∞a c√≥ √¢m thanh n√†o ƒëang ph√°t
        alarm_playing = True
        alarm_sound.play()

# H√†m ƒë·ªçc t√≠n hi·ªáu t·ª´ c·∫£m bi·∫øn MQ-2
def read_mq2():
    global mq2_triggered
    while True:
        try:
            if ser and ser.in_waiting > 0:
                mq2_data = ser.readline().decode().strip()
                if mq2_data == "GAS_DETECTED":
                    mq2_triggered = True
                    print("üî• MQ-2 ph√°t hi·ªán kh√≥i/gas! B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán l·ª≠a...")
                else:
                    mq2_triggered = False
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc MQ-2: {e}")
        time.sleep(0.1)  # Gi·∫£m t·∫£i CPU

# Ch·∫°y lu·ªìng ƒë·ªçc MQ-2
mq2_thread = threading.Thread(target=read_mq2, daemon=True)
mq2_thread.start()

# H√†m ƒë·ªçc video t·ª´ IP Camera (ch·∫°y trong lu·ªìng ri√™ng)
def read_camera():
    global frame
    cap = cv2.VideoCapture(IP_CAM_URL)
    
    # N·∫øu kh√¥ng m·ªü ƒë∆∞·ª£c camera, d·ª´ng ch∆∞∆°ng tr√¨nh
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi IP Camera! Ki·ªÉm tra ƒë·ªãa ch·ªâ.")
        return
    
    while True:
        ret, new_frame = cap.read()
        if ret:
            with frame_lock:  # ƒê·∫£m b·∫£o ƒë·ªçc/ghi frame an to√†n gi·ªØa c√°c lu·ªìng
                frame = cv2.resize(new_frame, (640, 480))  # Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ tƒÉng t·ªëc x·ª≠ l√Ω
        else:
            print("‚ùå L·ªói ƒë·ªçc camera! Ki·ªÉm tra k·∫øt n·ªëi.")
            break
        time.sleep(0.03)  # TƒÉng t·ªëc x·ª≠ l√Ω

    cap.release()

# Ch·∫°y lu·ªìng ƒë·ªçc video
camera_thread = threading.Thread(target=read_camera, daemon=True)
camera_thread.start()

# V√≤ng l·∫∑p x·ª≠ l√Ω
while True:
    try:
        if not mq2_triggered:
            time.sleep(0.1)  # Ti·∫øt ki·ªám CPU khi MQ-2 ch∆∞a k√≠ch ho·∫°t
            continue

        # ƒê·∫£m b·∫£o frame h·ª£p l·ªá
        with frame_lock:
            if frame is None:
                time.sleep(0.05)
                continue
            frame_copy = frame.copy()  # Sao ch√©p ƒë·ªÉ YOLO x·ª≠ l√Ω kh√¥ng b·ªã l·ªói

        # Ch·∫°y m√¥ h√¨nh YOLO ƒë·ªÉ nh·∫≠n di·ªán l·ª≠a
        results = model(frame_copy)

        fire_found = False  # M·∫∑c ƒë·ªãnh kh√¥ng c√≥ l·ª≠a

        # Ki·ªÉm tra c√°c bounding box t·ª´ YOLO
        for *xyxy, conf, cls in results.xyxy[0]:
            if conf > 0.3:  # Ng∆∞·ª°ng tin c·∫≠y
                x1, y1, x2, y2 = map(int, xyxy)
                cv2.rectangle(frame_copy, (x1, y1), (x2, y2), (0, 0, 255), 2)
                cv2.putText(frame_copy, f"Fire: {conf:.2f}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
                fire_found = True  # X√°c nh·∫≠n c√≥ l·ª≠a

        # N·∫øu ph√°t hi·ªán l·ª≠a l·∫ßn ƒë·∫ßu ti√™n, ph√°t c·∫£nh b√°o v√† ch·ª•p ·∫£nh
        if fire_found and not fire_detected:
            fire_detected = True
            if not alarm_playing:  # Ch·ªâ ph√°t √¢m thanh n·∫øu ch∆∞a ph√°t
                play_alarm()
            
            # Ch·ª•p ·∫£nh v√† l∆∞u
            timestamp = int(time.time())
            filename = os.path.join(save_dir, f"fire_detected_{timestamp}.jpg")
            cv2.imwrite(filename, frame_copy)  # L∆∞u ·∫£nh v·ªõi bounding box
            print(f"üì∏ ·∫¢nh ch·ª•p ƒë√£ l∆∞u: {filename}")

        # N·∫øu kh√¥ng c√≤n l·ª≠a, ch·ªâ reset bi·∫øn `fire_detected`, kh√¥ng reset `alarm_playing`
        elif not fire_found:
            fire_detected = False

        # Ki·ªÉm tra n·∫øu √¢m thanh ƒë√£ k·∫øt th√∫c, reset `alarm_playing`
        if not pygame.mixer.get_busy():
            alarm_playing = False

        # Hi·ªÉn th·ªã video
        cv2.imshow("Fire Detection", frame_copy)

        # Nh·∫•n 'q' ƒë·ªÉ tho√°t
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        break

cv2.destroyAllWindows()
if ser:
    ser.close()
